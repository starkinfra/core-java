import com.starkcore.utils.Resource;

import java.util.HashMap;
import java.util.Map;


public final class Transaction extends Resource {
    static ClassData data = new ClassData(Transaction.class, "Transaction");

    public long amount;
    public String description;
    public String externalId;
    public String senderId;
    public String receiverId;
    public String[] tags;
    public Integer fee;
    public String source;
    public Long balance;
    public String created;

    /**
     * Transaction object
     * <p>
     * A Transaction is a transfer of funds between workspaces inside Stark Bank.
     * Transactions created by the user are only for internal transactions.
     * Other operations (such as transfer or charge-payment) will automatically
     * create a transaction for the user which can be retrieved for the statement.
     * When you initialize a Transaction, the entity will not be automatically
     * created in the Stark Bank API. The "create" function sends the objects
     * to the Stark Bank API and returns the list of created objects.
     * <p>
     * Parameters:
     * @param amount [long]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
     * @param description [string]: text to be displayed in the receiver and the sender statements (Min. 10 characters). ex: "funds redistribution"
     * @param externalId [string]: unique id, generated by user, to avoid duplicated transactions. ex: "transaction ABC 2020-03-30"
     * @param receiverId [string]: unique id of the receiving workspace. ex: "5656565656565656"
     * @param tags [list of strings]: list of strings for reference when searching transactions (may be empty). ex: ["abc", "test"]
     * Attributes (return-only):
     * @param senderId [string]: unique id of the sending workspace. ex: "5656565656565656"
     * @param source [string, default null]: unique locator of the related entity in the API reference
     * @param id [string, default null]: unique id returned when the transaction is created. ex: "7656565656565656"
     * @param fee [integer, default null]: fee charged when the transaction is created. ex: 200 (= R$ 2.00)
     * @param balance [long, default null]: account balance after transaction was processed. ex: 100000000 (= R$ 1,000,000.00)
     * @param created [string, default null]: creation datetime for the transaction. ex: "2020-03-10 10:30:00.000000+00:00"
     */
    public Transaction(long amount, String description, String externalId, String receiverId, String senderId,
                       String[] tags, int fee, String created, String source, Long balance, String id) {
        super(id);
        this.amount = amount;
        this.description = description;
        this.externalId = externalId;
        this.receiverId = receiverId;
        this.senderId = senderId;
        this.tags = tags;
        this.fee = fee;
        this.source = source;
        this.balance = balance;
        this.created = created;
    }

    /**
     * Transaction object
     * <p>
     * A Transaction is a transfer of funds between workspaces inside Stark Bank.
     * Transactions created by the user are only for internal transactions.
     * Other operations (such as transfer or charge-payment) will automatically
     * create a transaction for the user which can be retrieved for the statement.
     * When you initialize a Transaction, the entity will not be automatically
     * created in the Stark Bank API. The "create" function sends the objects
     * to the Stark Bank API and returns the list of created objects.
     * <p>
     * Parameters:
     * @param data map of properties for the creation of the Transaction
     * amount [long]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
     * description [string]: text to be displayed in the receiver and the sender statements (Min. 10 characters). ex: "funds redistribution"
     * externalId [string]: unique id, generated by user, to avoid duplicated transactions. ex: "transaction ABC 2020-03-30"
     * receivedId [string]: unique id of the receiving workspace. ex: "5656565656565656"
     * <p>
     * Parameters (optional):
     * senderId [string]: unique id of the sending workspace. ex: "5656565656565656"
     * tags [list of strings]: list of strings for reference when searching transactions (may be empty). ex: ["abc", "test"]
     * Attributes (return-only):
     * source [string, default null]: unique locator of the related entity in the API reference
     * id [string, default null]: unique id returned when transaction is created. ex: "7656565656565656"
     * fee [integer, default null]: fee charged when the transaction is created. ex: 200 (= R$ 2.00)
     * balance [long, default null]: account balance after the transaction was processed. ex: 100000000 (= R$ 1,000,000.00)
     * created [string, default null]: creation datetime for the transaction. ex: "2020-03-10 10:30:00.000000+00:00"
     * @throws Exception error in the request
     */
    public Transaction(Map<String, Object> data) throws Exception {
        super(null);
        HashMap<String, Object> dataCopy = new HashMap<>(data);

        this.amount = (int) dataCopy.remove("amount");
        this.description = (String) dataCopy.remove("description");
        this.externalId = (String) dataCopy.remove("externalId");
        this.receiverId = (String) dataCopy.remove("receiverId");
        this.tags = (String[]) dataCopy.remove("tags");
        this.fee = null;
        this.senderId = null;
        this.source = null;
        this.balance = null;
        this.created = null;

        if (!dataCopy.isEmpty()) {
            throw new Exception("Unknown parameters used in constructor: [" + String.join(", ", dataCopy.keySet()) + "]");
        }
    }
}
